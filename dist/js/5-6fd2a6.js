webpackJsonp([5],{366:function(t,n,e){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function i(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function u(t,n,e){return n&&i(t.prototype,n),e&&i(t,e),t}function p(t,n){return!n||"object"!==r(n)&&"function"!=typeof n?c(t):n}function c(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function f(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&a(t,n)}function a(t,n){return(a=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}Object.defineProperty(n,"__esModule",{value:!0});var h=e(6),y=e.n(h),s=function(t){function n(t){return o(this,n),p(this,l(n).call(this,t))}return f(n,t),u(n,[{key:"rawMarkup",value:function(){return{__html:'<h1 id="http-">Http 代理原理</h1>\n<h3 id="-http-">什么是 Http 代理？</h3>\n<p>Http 代理工作于服务器端和客户端之间，可以在 Http 请求发送至服务器前对 Http 协议进行逐行处理，再转发到后台服务器，反之亦可。</p>\n<div align="center"><img width="100%" height="auto" src="http://p42jcfxfo.bkt.clouddn.com/images/thinkin/web_proxy.png"/></div>\n\n<h3 id="http-">Http 代理的功能</h3>\n<p>Http 代理是一个中间程序，既可以担当客户端角色，也可以担当服务端角色。具体可以实现的功能有：</p>\n<ul>\n<li>修改 HTTP 请求：url、header、body</li>\n<li>过滤请求：根据一定的规则丢弃、过滤请求</li>\n<li>决定转发到哪个后端（可以是静态定义的，也可以是动态决定）</li>\n<li>修改应答：对应答做一些格式的转换，修改数据，甚至返回完全不一样的应答数据</li>\n<li>...</li>\n</ul>\n<h3 id="-">正向代理和反向代理</h3>\n<h4 id="-">正向代理</h4>\n<p>正向代理是一个位于客户端和原始服务器,为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p>\n<h4 id="-">反向代理</h4>\n<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求， 然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端， 此时代理服务器对外就表现为一个服务器。</p>\n<p>其实，反向代理也就是通常所说的 WEB 服务器加速， 它是一种通过在繁忙的 WEB 服务器和 Internet 之间增加一个高速的 WEB 缓冲服务器（即：WEB 反向代理服务器） 来降低实际的 WEB 服务器的负载。</p>\n'}}},{key:"render",value:function(){return y.a.createElement("div",{dangerouslySetInnerHTML:this.rawMarkup()})}}]),n}(h.Component);n.default=s}});