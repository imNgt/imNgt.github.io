webpackJsonp([10],{364:function(s,n,t){"use strict";function e(s){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(s){return typeof s}:function(s){return s&&"function"==typeof Symbol&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s})(s)}function r(s,n){if(!(s instanceof n))throw new TypeError("Cannot call a class as a function")}function a(s,n){for(var t=0;t<n.length;t++){var e=n[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(s,e.key,e)}}function l(s,n,t){return n&&a(s.prototype,n),t&&a(s,t),s}function p(s,n){return!n||"object"!==e(n)&&"function"!=typeof n?i(s):n}function i(s){if(void 0===s)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return s}function o(s){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(s){return s.__proto__||Object.getPrototypeOf(s)})(s)}function c(s,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");s.prototype=Object.create(n&&n.prototype,{constructor:{value:s,writable:!0,configurable:!0}}),n&&u(s,n)}function u(s,n){return(u=Object.setPrototypeOf||function(s,n){return s.__proto__=n,s})(s,n)}Object.defineProperty(n,"__esModule",{value:!0});var h=t(6),f=t.n(h),d=function(s){function n(s){return r(this,n),p(this,o(n).call(this,s))}return c(n,s),l(n,[{key:"rawMarkup",value:function(){return{__html:'<h1 id="eslint-prettier-">Eslint 和 Prettier 配置自动格式化代码</h1>\n<p>Eslint 可以提供代码检查，而 Prettier 能够统一团队代码风格，两者结合在一起会事半功倍。</p>\n<h4 id="-">安装依赖</h4>\n<pre><code>npm <span className="hljs-keyword">install</span> prettier babel-eslint eslint eslint-config-prettier eslint-<span class="hljs-keyword">plugin</span>-flowtype eslint-<span class="hljs-keyword">plugin</span>-prettier eslint-<span class="hljs-keyword">plugin</span>-<span class="hljs-keyword">import</span>  <span class="hljs-comment">--save-dev</span>\n</code></pre><ul>\n<li>eslint-config-prettier 可以取消 eslint 和 prettier 冲突的配置项，采用 prettier 风格</li>\n<li>eslint-plugin-prettier 可以将 prettier 的格式化规则作为 eslint 的检查规则</li>\n</ul>\n<h4 id="-">相关配置文件</h4>\n<p>新建 Eslint 和 Prettier 的配置件：</p>\n<pre><code><span class="hljs-selector-tag">touch</span> <span class="hljs-selector-class">.eslintrc</span>\n<span class="hljs-selector-tag">touch</span> <span class="hljs-selector-class">.prettierrc</span>\n</code></pre><p>在.eslintrc 写入一下内容:</p>\n<pre><code>{\n    <span class="hljs-attr">"parser"</span>: <span class="hljs-string">"babel-eslint"</span>,\n    <span class="hljs-attr">"extends"</span>: [\n        <span class="hljs-string">"prettier"</span>,\n        <span class="hljs-string">"prettier/flowtype"</span> // if you are using flow\n    ],\n    <span class="hljs-attr">"rules"</span>: {\n        <span class="hljs-attr">"indent"</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-number">2</span>],\n        <span class="hljs-attr">"prettier/prettier"</span>: <span class="hljs-string">"error"</span>\n    },\n    <span class="hljs-attr">"plugins"</span>: [\n        /* Flow type linting rules for ESLint. */\n        <span class="hljs-string">"flowtype"</span>,\n        <span class="hljs-string">"prettier"</span>\n    ]\n}\n</code></pre><p>eslint 规则是完全可配置的，其级别为：</p>\n<ul>\n<li>&quot;off&quot; 或 0 - 关闭规则</li>\n<li>&quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li>\n<li>&quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li>\n</ul>\n<p>更多配置项见 <a href="https://cn.eslint.org/docs/user-guide/configuring">https://cn.eslint.org/docs/user-guide/configuring</a></p>\n<p>在.prettierrc 写入以下内容:</p>\n<pre><code>{\n    <span class="hljs-attr">"tabWidth"</span>: <span class="hljs-number">2</span>,\n    <span class="hljs-attr">"singleQuote"</span>: <span class="hljs-literal">true</span>\n}\n</code></pre><p>更多配置项见 <a href="https://prettier.io/docs/en/configuration.html">https://prettier.io/docs/en/configuration.html</a></p>\n<h4 id="-">开发工具的配置</h4>\n<p>例如，将以下配置加入配置文件：</p>\n<pre><code>    {\n        <span class="hljs-attr">"editor.formatOnSave"</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">"prettier.disableLanguages"</span>: [<span class="hljs-string">"js"</span>],\n        <span class="hljs-attr">"eslint.autoFixOnSave"</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">"eslint.alwaysShowStatus"</span>: <span class="hljs-literal">true</span>\n    }\n</code></pre><h4 id="-husky-lint-staged-">使用 Husky + Lint-Staged 在代码提交前自定检查并修正代码</h4>\n<ul>\n<li>由于 husky 在 .git/hooks 中写入了 pre-commit 钩子，该钩子在 git commit 执行时被触发</li>\n<li>lint-staged 利用配置的文件过滤路径，对暂存区文件一个个进行匹配，匹配成功时，运行 eslint –fix 并自动将修改添加到暂存区</li>\n</ul>\n<pre><code>yarn <span class="hljs-keyword">add</span><span class="bash">  precommit husky --dev</span>\n</code></pre><p>在 package.json 添加配置</p>\n<pre><code>    <span class="hljs-string">"scripts"</span>: {\n        <span class="hljs-string">"precommit"</span>: <span class="hljs-string">"lint-staged"</span> <span class="hljs-string">//husky</span> 在 <span class="hljs-string">.git/hooks</span> 中写入了 钩子\n    },\n    <span class="hljs-string">"lint-staged"</span>: {\n        <span class="hljs-string">"src/**/*.js"</span>: [\n            <span class="hljs-string">"prettier --write"</span>,\n            <span class="hljs-string">"git add"</span>\n        ]\n    },\n</code></pre>'}}},{key:"render",value:function(){return f.a.createElement("div",{dangerouslySetInnerHTML:this.rawMarkup()})}}]),n}(h.Component);n.default=d}});