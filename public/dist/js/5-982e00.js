webpackJsonp([5],{380:function(n,i,l){"use strict";function t(n){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function e(n,i){if(!(n instanceof i))throw new TypeError("Cannot call a class as a function")}function o(n,i){for(var l=0;l<i.length;l++){var t=i[l];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function r(n,i,l){return i&&o(n.prototype,i),l&&o(n,l),n}function p(n,i){return!i||"object"!==t(i)&&"function"!=typeof i?u(n):i}function u(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function a(n){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function c(n,i){if("function"!=typeof i&&null!==i)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(i&&i.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),i&&s(n,i)}function s(n,i){return(s=Object.setPrototypeOf||function(n,i){return n.__proto__=i,n})(n,i)}Object.defineProperty(i,"__esModule",{value:!0});var f=l(6),h=l.n(f),d=function(n){function i(n){return e(this,i),p(this,a(i).call(this,n))}return c(i,n),r(i,[{key:"rawMarkup",value:function(){return{__html:'<h1 id="web-">web 性能优化</h1>\n<h3 id="-">代码优化</h3>\n<ol>\n<li>css</li>\n</ol>\n<ul>\n<li>css 合并，尽量减少 HTTP 请求（code splitting 除外）</li>\n<li>css 压缩</li>\n<li>将 css 文件放在页面最上面</li>\n<li>选择器优化嵌套，尽量避免层级过深</li>\n<li>充分利用 css 继承属性，减少代码量，如 font、color、line-height</li>\n<li>抽象提取公共样式，区分公共 CSS 和 业务 CSS，减少代码量</li>\n<li>使用伪元素，如::before，::after</li>\n<li>css 雪碧图</li>\n</ul>\n<ol start="2">\n<li>html</li>\n</ol>\n<ul>\n<li>简化 html 结构，尽量避免层级过深</li>\n<li>标签语义化，用正确的标签做正确的事情</li>\n</ul>\n<ol start="3">\n<li>javascript</li>\n</ol>\n<ul>\n<li>将脚本放到页面底部</li>\n<li>删除不必要的代码，如不必要的 console、注释等</li>\n<li>减少 dom 访问，可以使用 innerHTML 代替</li>\n<li>少用全局变量</li>\n<li>压缩代码</li>\n</ul>\n<ol start="4">\n<li>图片</li>\n</ol>\n<ul>\n<li>CSS3 模拟图像，图标 base64</li>\n<li>图片压缩，使用合理大小的图片</li>\n</ul>\n<h3 id="-">网络相关</h3>\n<ol>\n<li><p>dns 预解析</p>\n<pre><code> &lt;link <span className="hljs-attribute">rel</span>=<span class="hljs-string">"dns-prefetch"</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">"xxx.com"</span>&gt;\n</code></pre></li>\n<li><p>HTTP 缓存</p>\n<ul>\n<li>Cache-control 强制缓存: [privatepublic\no-cachemax-age=xxx\no-store]<ul>\n<li>控制缓存时间，http1.1</li>\n</ul>\n</li>\n<li>Expires 强制缓存<ul>\n<li>和 max-age=xxx 类似,http1.0</li>\n</ul>\n</li>\n<li>Last-Modified / If-Modified-Since 协商缓存<ul>\n<li>Last-Modified：服务器在响应请求时，告诉浏览器资源的最后修改时间</li>\n<li>If-Modified-Since：再次请求服务器时，通过此字段通知服务器上次请求时，服务器收到请求后发现有头 If-Modified-Since 则与被请求资源的最后修改时间进行比对。</li>\n</ul>\n</li>\n<li>ETag 协商缓存<ul>\n<li>比较 Etag，级别比 Last-Modified 高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>域名拆分</p>\n<p> HTTP 客户端一般对同一个服务器的 HTTP 并发连接个数都是有限制的，chrome 4+为 6 个。\n 域名拆分主要是为了增加浏览器下载的并行度，让浏览器能同时发起更多的请求。\n 域名拆分为 3 到 5 个比较合适，过多的域名会带来 DNS 解析时间的损耗，可能会降低性能</p>\n</li>\n<li><p>使用 CDN 加速（访问最近服务器）</p>\n</li>\n<li><p>开启 KeepAlive</p>\n<p> 开启 KeepAlive 能够减少浏览器与服务器建立连接的次数，从而节省建立连接时间。</p>\n</li>\n<li><p>localStorage 本地存储、</p>\n</li>\n<li><p>开启 Gzip</p>\n<p> Gzip 是一种压缩技术，可以将资源在服务端进行压缩，然后发送给浏览器后再进行解压，这种方式会降低传输大小，提高网页加载性能。可以通过 Nginx 配置。</p>\n</li>\n<li><p>合并请求</p>\n<p> 合并请求的主要目的是减少浏览器对服务器发起的请求数，从而减少在发起请求过程中花费的时间。</p>\n</li>\n</ol>\n<h3 id="-">最后</h3>\n<p>终极优化清单：<a href="http://cdn.inoongt.tech/images/thinkin/optimization.png">http://cdn.inoongt.tech/images/thinkin/optimization.png</a></p>\n'}}},{key:"render",value:function(){return h.a.createElement("div",{dangerouslySetInnerHTML:this.rawMarkup()})}}]),i}(f.Component);i.default=d}});