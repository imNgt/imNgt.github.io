webpackJsonp([6],{366:function(s,n,a){"use strict";function t(s){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(s){return typeof s}:function(s){return s&&"function"==typeof Symbol&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s})(s)}function p(s,n){if(!(s instanceof n))throw new TypeError("Cannot call a class as a function")}function e(s,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(s,t.key,t)}}function l(s,n,a){return n&&e(s.prototype,n),a&&e(s,a),s}function r(s,n){return!n||"object"!==t(n)&&"function"!=typeof n?o(s):n}function o(s){if(void 0===s)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return s}function i(s){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(s){return s.__proto__||Object.getPrototypeOf(s)})(s)}function c(s,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");s.prototype=Object.create(n&&n.prototype,{constructor:{value:s,writable:!0,configurable:!0}}),n&&h(s,n)}function h(s,n){return(h=Object.setPrototypeOf||function(s,n){return s.__proto__=n,s})(s,n)}Object.defineProperty(n,"__esModule",{value:!0});var u=a(6),j=a.n(u),d=function(s){function n(s){return p(this,n),r(this,i(n).call(this,s))}return c(n,s),l(n,[{key:"rawMarkup",value:function(){return{__html:'<h1 id="http-">Http 代理原理</h1>\n<h3 id="-http-">什么是 Http 代理？</h3>\n<p>Http 代理工作于服务器端和客户端之间，可以在 Http 请求发送至服务器前对 Http 协议进行逐行处理，再转发到后台服务器，反之亦可。</p>\n<div align="center"><img width="100%" height="auto" src="http://cdn.inoongt.tech/images/thinkin/web_proxy.png"/></div>\n\n<h3 id="http-">Http 代理的功能</h3>\n<p>Http 代理是一个中间程序，既可以担当客户端角色，也可以担当服务端角色。具体可以实现的功能有：</p>\n<ul>\n<li>修改 HTTP 请求：url、header、body</li>\n<li>过滤请求：根据一定的规则丢弃、过滤请求</li>\n<li>决定转发到哪个后端（可以是静态定义的，也可以是动态决定）</li>\n<li>修改应答：对应答做一些格式的转换，修改数据，甚至返回完全不一样的应答数据</li>\n<li>...</li>\n</ul>\n<h3 id="-">正向代理和反向代理</h3>\n<h4 id="-">正向代理</h4>\n<p>正向代理是一个位于客户端和原始服务器,为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。正向代理可以达到隐藏客户端 IP 的目的。</p>\n<h4 id="-">反向代理</h4>\n<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求， 然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端， 此时代理服务器对外就表现为一个服务器，可以用来隐藏服务器的一些信息，比如 IP 及端口。</p>\n<p>其实，反向代理也就是通常所说的 WEB 服务器加速， 它是一种通过在繁忙的 WEB 服务器和 Internet 之间增加一个高速的 WEB 缓冲服务器（即：WEB 反向代理服务器） 来降低实际的 WEB 服务器的负载。</p>\n<h3 id="-">编程实践</h3>\n<p>serve.js:</p>\n<pre><code className="lang-javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">"http"</span>);\n<span class="hljs-keyword">var</span> net = <span class="hljs-built_in">require</span>(<span class="hljs-string">"net"</span>);\n<span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">"url"</span>);\n\n<span class="hljs-comment">// http://:127.0.0.1:3333/ 是本地的服务器</span>\n<span class="hljs-keyword">var</span> config = {\n    <span class="hljs-attribute">hostname</span>: <span class="hljs-string">"127.0.0.1"</span>,\n    <span class="hljs-attribute">port</span>: <span class="hljs-string">"3333"</span>\n};\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">req, res</span>) </span>{\n    <span class="hljs-keyword">var</span> u = <span class="hljs-built_in">url</span>.parse(req.url);\n    <span class="hljs-keyword">var</span> options = {\n        <span class="hljs-attribute">hostname</span>: u.hostname || config.hostname,\n        <span class="hljs-attribute">port</span>: u.port || config.port,\n        <span class="hljs-attribute">path</span>: u.path,\n        <span class="hljs-attribute">method</span>: req.method,\n        <span class="hljs-attribute">headers</span>: req.headers\n    };\n\n    <span class="hljs-comment">// 将请求转发至服务端</span>\n    <span class="hljs-keyword">var</span> svrReq = http\n        .request(options, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">svrRes</span>) </span>{\n            <span class="hljs-comment">// 修改代理响应头部</span>\n            res.writeHead(svrRes.statusCode, svrRes.headers);\n            <span class="hljs-comment">// 把服务端的响应推送代理的响应中</span>\n            svrRes.pipe(res);\n        })\n        .on(<span class="hljs-string">"error"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>{\n            res.end();\n        });\n\n    <span class="hljs-comment">// 将代理收到的请求推送到服务端请求</span>\n    req.pipe(svrReq);\n}\n\nhttp.createServer()\n    .on(<span class="hljs-string">"request"</span>, request)\n    .listen(<span class="hljs-number">9091</span>, <span class="hljs-string">"0.0.0.0"</span>);\n</code></pre>\n<p>启动代理服务器：</p>\n<pre><code>    <span class="hljs-keyword">node</span> <span class="hljs-title">serve</span>.js\n</code></pre><p>再浏览器中打开输入请求：</p>\n<pre><code><span class="hljs-selector-tag">fetch</span>(<span class="hljs-string">\'/api/posts\'</span>,{\n    <span class="hljs-attribute">method</span>:<span class="hljs-string">\'get\'</span>,\n    <span class="hljs-attribute">headers</span>:{<span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/json\'</span>},\n    })\n</code></pre><p>可以看到请求成功，并且成功获取到服务端返回的数据：</p>\n<div align="center"><img width="100%" height="auto" src="http://alicdn.inoongt.tech/images/posts_suc.png"/></div>\n\n<div align="center"><img width="100%" height="auto" src="http://alicdn.inoongt.tech/images/posts_data.png"/></div>\n\n<h3 id="http-webpack-">HTTP 代理在 webpack 中的应用</h3>\n<p>在前端启动 webpack 本地服务(<a href="http://localhost:9091)，通过">http://localhost:9091)，通过</a> api 向后端服务器发送请求(<a href="http://localhost:3333)，通常会发生跨域问题。比如：">http://localhost:3333)，通常会发生跨域问题。比如：</a></p>\n<div align="center"><img width="100%" height="auto" src="http://alicdn.inoongt.tech/images/proxy_cross.png"/></div>\n\n<p>这时可以将请求指向 webpack 本地服务,再由 webpack 服务将其至服务器<a href="http://localhost:3333。原本的请求http://localhost:3333/api/user/login变成了http://localhost:9091/api/user/login，这样就绕开了跨域的问题。">http://localhost:3333。原本的请求http://localhost:3333/api/user/login变成了http://localhost:9091/api/user/login，这样就绕开了跨域的问题。</a></p>\n<div align="center"><img width="100%" height="auto" src="http://alicdn.inoongt.tech/images/proxy_cross_success.png"/></div>\n\n<p>webpack-serve 配置如下：</p>\n<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">"path"</span>);\n\n<span class="hljs-keyword">const</span> convert = <span class="hljs-built_in">require</span>(<span class="hljs-string">"koa-connect"</span>);\n<span class="hljs-keyword">const</span> history = <span class="hljs-built_in">require</span>(<span class="hljs-string">"connect-history-api-fallback"</span>);\n<span class="hljs-keyword">const</span> proxy = <span class="hljs-built_in">require</span>(<span class="hljs-string">"http-proxy-middleware"</span>);\n\n<span class="hljs-built_in">module</span>.exports = {\n    <span class="hljs-attr">entry</span>: {\n        <span class="hljs-attr">index</span>: [path.resolve(__dirname, <span class="hljs-string">"app.js"</span>)]\n    },\n    <span class="hljs-attr">mode</span>: <span class="hljs-string">"development"</span>,\n    <span class="hljs-attr">output</span>: {\n        <span class="hljs-attr">filename</span>: <span class="hljs-string">"output.js"</span>\n    }\n};\n\n<span class="hljs-built_in">module</span>.exports.serve = {\n    <span class="hljs-attr">content</span>: [__dirname],\n    <span class="hljs-attr">add</span>: <span class="hljs-function">(<span class="hljs-params">app, middleware, options</span>) =&gt;</span> {\n        app.use(convert(proxy(<span class="hljs-string">"/api"</span>, { <span class="hljs-attr">target</span>: <span class="hljs-string">"http://localhost:3333"</span> })));\n        app.use(convert(history()));\n    }\n};\n\n<span class="hljs-comment">// Proxy\'s docs: https://github.com/chimurai/http-proxy-middleware</span>\n</code></pre>\n<p>配置后本地所有/api 的请求,都会被代理到<a href="http://localhost:3333/api。">http://localhost:3333/api。</a></p>\n'}}},{key:"render",value:function(){return j.a.createElement("div",{dangerouslySetInnerHTML:this.rawMarkup()})}}]),n}(u.Component);n.default=d}});